<ul class="tree-root">
    @for (int i = 0; i < Nodes.Count; i++)
    {
        var node = Nodes[i];
        bool isSelected = SelectedPath == node.Path;
        bool isFirstNode = i == 0;
        bool isSearchHighlight = SearchMatches.Contains(node.Path);
        bool isCurrentSearch = !string.IsNullOrEmpty(CurrentSearchPath) && node.Path == CurrentSearchPath;
        
        @* 调试：输出路径比较信息 *@
        @if (!string.IsNullOrEmpty(CurrentSearchPath))
        {
            <text><!-- Debug: CurrentSearchPath=@CurrentSearchPath, node.Path=@node.Path, isCurrentSearch=@isCurrentSearch --></text>
        }
        
        <ProtoTreeViewNode Node="node"
                           OnSelect="OnSelect"
                           ExpandedState="ExpandedState"
                           SelectedPath="SelectedPath"
                           IsSelected="isSelected"
                           IsFirstNode="isFirstNode"
                           TotalNodeCount="@(isFirstNode ? GetTotalNodeCount() : 0)"
                           SearchMatches="SearchMatches"
                           CurrentSearchPath="CurrentSearchPath"
                           IsSearchHighlight="isSearchHighlight"
                           IsCurrentSearch="isCurrentSearch" />
    }
</ul>

@code {
    [Parameter] public IReadOnlyList<ProtoDisplayNode> Nodes { get; set; } = [];
    [Parameter] public EventCallback<ProtoDisplayNode> OnSelect { get; set; }
    [Parameter] public string SelectedPath { get; set; } = string.Empty;
    [Parameter] public List<string> SearchMatches { get; set; } = new();
    [Parameter] public string CurrentSearchPath { get; set; } = string.Empty;

    [Parameter] public Dictionary<string, bool> ExpandedState { get; set; } = new();

    private int GetTotalNodeCount()
    {
        int count = 0;
        foreach (var node in Nodes)
        {
            count += CountNodesRecursive(node);
        }
        return count;
    }

    private int CountNodesRecursive(ProtoDisplayNode node)
    {
        int count = 1; // 当前节点
        foreach (var child in node.Children)
        {
            count += CountNodesRecursive(child);
        }
        return count;
    }
}

